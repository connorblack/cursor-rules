---
name: intelligent-search-strategy  
description: Maximizes search effectiveness
alwaysApply: true
references: [universal-mcp-loop]
---

# Search Cascades (Run in Parallel)

## For Every Import/Library:
1. context7.resolve-library-id(library)
2. exa.web_search(f"{library} breaking changes 2024 2025")
3. exa.web_search(f"{library} best practices current")

## For Every Error:
1. exa.web_search(exact_error_message)
2. neo4j.search_memories(error_signature)
3. If novel: exa.deep_researcher_start(error_context)

## For Every Implementation:
1. neo4j.search_memories(similar_implementations)
2. exa.web_search(f"{pattern} implementation {language} 2024")
3. context7.get-library-docs(topic=specific_feature)

# Preemptive Searching

Don't wait for problems:
- See React? → Search "React 18 vs 19 differences"
- See async? → Search "async patterns {language} 2024"
- See API? → Search "REST vs GraphQL 2024"
- See database? → Search "SQL optimization techniques"

# Search Quality Metrics
Track in memory:
- Search queries that yielded useful results
- Patterns that consistently need updating
- Documentation gaps discovered