---
description: Core TypeScript best practices for type safety, clarity, and maintainability.
globs: **/*.ts, **/*.tsx
---

# TypeScript Best Practices

**Core Principle:** Use TypeScript's static typing system effectively to improve code quality and reduce runtime errors.

## Type Safety

- **ASSUME** strict mode is enabled and write type-safe code accordingly
- **PROVIDE** explicit types for function parameters and returns when not easily inferred
- **AVOID** the `any` type; use `unknown` as a safer alternative when needed
- **USE** specific types over general ones (e.g., detailed interfaces instead of `object`)
- **LEVERAGE** built-in utility types (Partial, Pick, Omit, etc.) for type transformations

## Type Definitions

- **USE** `interface` for object shapes meant to be implemented or extended
- **USE** `type` for unions, intersections, tuples, and complex type manipulations
- **FOLLOW** the project's established patterns for interface vs. type usage
- **MAINTAIN** consistency within modules and related components

## Readability

- **CREATE** meaningful names for types and interfaces
- **KEEP** type definitions focused and avoid excessive nesting
- **BREAK DOWN** complex types into smaller, named components
- **EXPORT** reusable types from their modules
