---
description: Common patterns for understanding, implementing, and analyzing problems within a codebase.
globs: **/*
---

# Problem-Solving Patterns

**Core Principle:** Apply these structured approaches to common coding tasks and challenges.

## Analysis Patterns

- **Architecture Discovery**

  - Examine configs → Map directories → Identify dependencies → Analyze workflows
  - Focus on understanding project structure and component interactions

- **Change Impact Assessment**

  - Trace dependencies → Identify affected modules → Evaluate risks → Plan testing
  - Scale analysis based on coupling, test coverage, and deployment model

- **Performance Analysis**
  - Profile execution → Analyze data flow → Identify expensive operations → Test improvements
  - Focus on metrics that matter to the specific use case

## Implementation Patterns

- **Feature Addition**

  - Identify insertion points → Design interface → Implement logic → Connect → Test
  - Use existing patterns and maintain architectural consistency

- **Refactoring**

  - Identify issue → Design improvement → Make incremental changes → Verify behavior
  - Focus on preserving behavior while improving structure

- **Bug Resolution**
  - Reproduce → Trace → Identify root cause → Design minimal fix → Verify
  - Prioritize targeted fixes that minimize regression risk
