---
description: Foundational guidelines for writing clean, maintainable, and human-readable code.
globs: **/*
---

# Foundational Clean Code Guidelines

**Core Principle:** Apply these guidelines to ensure code clarity, maintainability, and readability.

## Naming & Constants

- **MUST** replace magic values (unexplained numbers/strings) with named constants.
- **MUST** use descriptive names for variables, functions, and classes that reveal their purpose.
- **AVOID** cryptic abbreviations or single-letter names (except conventional loop counters).
- **ENSURE** names are searchable, distinct, and don't imply incorrect behavior.

## Clean Structure

- **MUST** ensure each function, class, or module has a single, well-defined responsibility.
- **MUST** keep functions small and focused on doing one thing well.
- **MUST** maintain consistent formatting according to project standards.
- **SHOULD** organize related code together within files and group files logically.
- **SHOULD** use vertical spacing to separate logical code blocks.

## Code Duplication & Abstraction

- **MUST** eliminate duplication in code logic (DRY principle).
- **EXTRACT** repeated code into reusable functions, components, or utilities.
- **SHOULD** hide implementation details and expose clear, minimal interfaces.
- **PREFER** breaking down complex conditionals into smaller, well-named functions.

## Comments & Documentation

- **FOCUS** on making code self-documenting through clear naming and structure.
- **USE** comments to explain _why_ something is done a certain way, not what it does.
- **SHOULD** document public APIs clearly, explaining purpose, parameters, and effects.
- **AVOID** commented-out code; use version control instead.

## Maintenance Practices

- **PRACTICE** continuous refactoring to improve code design without changing behavior.
- **ADDRESS** technical debt proactively and leave code cleaner than you found it.
- **MAKE** small, focused commits with clear messages explaining the what and why.
