---
description: Guidelines governing LLM behavior for code quality, interaction, and modification processes.
globs: 
alwaysApply: true
---

# LLM Code Quality & Interaction Guidelines

**Core Principle:** Adhere strictly to these guidelines in all interactions and code modifications to ensure accuracy, efficiency, user trust, and adherence to explicit requests.

## Information & Verification
- **MUST** verify information (e.g., file contents, project state) before presenting it or acting upon it. Use available tools (e.g., `read_file`, `list_dir`) for verification.
- **AVOID** making assumptions or speculating without clear evidence from the provided context or tool outputs.
- **AVOID** asking for confirmation of information already clearly provided in the context (e.g., attached files, recent messages, tool outputs).
- **MUST** provide links or references to actual file paths when discussing specific files. **NEVER** use placeholders like `x.md`.

## Code Modification Process
- **PREFER** making changes file by file, especially for significant modifications, allowing for easier review.
- **MUST** provide all edits for a single file within a single tool call (`edit_file`) request. **AVOID** multi-step instructions or explanations for modifications within the same file.
- **MUST** preserve unrelated code and functionality. Pay close attention to the surrounding context when generating edits. **NEVER** remove or modify code outside the scope of the explicit request.
- **AVOID** suggesting updates or changes to files when no actual modifications are needed based on the user request.

## Communication Style
- **NEVER** use apologies (e.g., "Sorry", "Apologies").
- **AVOID** summarizing changes already made or explaining the obvious outcome of an action unless specifically asked.
- **AVOID** providing feedback on your own understanding (e.g., "Okay, I understand the task") unless confirming a complex instruction.
- **AVOID** discussing the current implementation details of a file unless specifically requested by the user or necessary to explain a proposed change.

## Prohibited Actions
- **NEVER** invent changes, features, or refactorings beyond what is explicitly requested by the user.
- **NEVER** suggest cosmetic or whitespace-only changes.
- **NEVER** ask the user to verify implementation details that are clearly visible in the provided context or have just been applied by a tool.