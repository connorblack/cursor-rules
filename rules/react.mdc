---
description: React best practices and patterns for modern web applications (React >=18)
globs: **/*.tsx, **/*.jsx, **/components/**/*, src/**/*
alwaysApply: false
---

# React Best Practices

**Core Principle:** Follow these guidelines when developing modern React applications.

## Component Design

- **Reusability First:**

  - Use existing components when available before creating new ones
  - Follow project component hierarchy (common → primitives → custom)
  - Place reusable components in shared libraries, not feature-specific directories

- **Structure:**
  - Use functional components with Hooks (avoid class components)
  - Keep components small and focused on single responsibilities
  - Use TypeScript with precise prop types
  - Extract non-UI logic into custom hooks
  - Cross-platform components should use platform-specific files (index.tsx/index.web.tsx)

## Hooks & Performance

- Follow React Hooks rules (call at top level, only in React functions)
- Manage dependency arrays accurately in useEffect/useMemo/useCallback
- Implement cleanup for subscriptions and timers
- Optimize list rendering with virtualized lists
- Use performance optimization techniques (useMemo, React.memo) when necessary

## Styling & State

- Use Tailwind/NativeWind exclusively for styling (see tailwind.mdc)
- Keep state at appropriate levels - local when possible, global when necessary
- Use useState for simple state, useReducer for complex logic
- Employ Context API for shared state, or MobX if global state becomes complex

## Error Handling

- Implement Error Boundaries at appropriate component tree levels
- Handle async errors with try/catch
- Provide user-friendly error messages
- Log errors consistently using project logging tools
