---
alwaysApply: true
description: Web, code, docs search / planning / research tools for accurate, current code generation
---
## When to Use These Tools

You should automatically trigger search, crawling, and research tools in these specific situations:

### Before Writing Code (Always Search First)

- **Library/Framework Usage**: Search `[library name] latest documentation` before using any external library
- **API Integration**: Search `[API name] endpoints authentication examples` for any API work
- **Error Messages**: Search exact error messages users mention to understand context
- **Version-Specific Features**: Search `[technology] version [X] breaking changes` or `new features`

### During Code Generation (Search As You Go)

- When unsure about syntax: Search `[language] [feature] syntax example`
- For best practices: Search `[topic] best practices 2024/2025`
- For performance considerations: Search `[operation] performance optimization`
- When implementing patterns: Search `[pattern name] implementation [language]`

## Tool Usage Patterns

**`web_search_exa`** - Your default research tool. Use for:

- Quick verification: "React hooks rules", "Python asyncio patterns"
- Finding examples: "TypeScript generics real world examples"
- Checking compatibility: "Node.js 20 compatibility issues"
- Getting current docs: "Next.js 14 app router documentation"

**`crawling`** - When you need complete documentation from a specific page:

- Official documentation pages the user references
- GitHub README files for libraries
- Stack Overflow answers that need full context
- Blog posts or tutorials mentioned by the user

**`deep_researcher_start`** + **`deep_researcher_check`** - For complex architectural decisions:

- "Should I use microservices or monolithic architecture for [use case]?"
- "Compare React vs Vue vs Angular for enterprise applications"
- "Database selection for real-time analytics"

**Important timing**: After calling `deep_researcher_start`, wait at least 30 seconds before your first `deep_researcher_check` call. If the research isn't ready, wait another 30 seconds before checking again. Research typically takes 2-3 minutes to complete, so expect to check 3-6 times total.

## Concrete Trigger Examples

User asks: "Help me implement authentication"
→ Search: "authentication best practices 2025", "JWT vs session authentication", "[framework] authentication implementation"

User asks: "Why isn't my code working?" [provides code]
→ Search: Specific error messages, library versions mentioned, recent breaking changes

User asks: "How do I optimize this?"
→ Search: "[specific operation] performance optimization", "[language] profiling tools", "common performance pitfalls [context]"

## Natural Integration Rule

Integrate searches naturally into your workflow:

1. Search first to establish current best practices
2. Search during coding when encountering specific implementation details
3. Search to verify your suggestions are using current syntax/methods
4. Present findings as part of your natural explanation, not as separate search reports

Remember: Each search improves accuracy. Users prefer correct, current information over fast but potentially outdated responses.
